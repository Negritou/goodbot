import asyncio
import json
import os
from aiogram import types
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.memory import MemoryJobStore
from datetime import datetime, timedelta
from random import uniform, randint
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums.parse_mode import ParseMode

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "8397737792:AAHLYGC9AJOSJtWJa-CF2hmnrphGOpDgRVE"  # ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
DATA_FILE = "users.json"

ADMIN_ID = 5831677681  # ‚ö†Ô∏è –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID –∞–¥–º–∏–Ω–∞
GROW_COOLDOWN = timedelta(hours=1)
SMOKE_COOLDOWN = timedelta(hours=1)
IQ_COOLDOWN = timedelta(hours=1)
CUSTOM_COOLDOWN = timedelta(hours=1)  # –ö—É–ª–¥–∞—É–Ω –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã

SMOKER_LEVELS = {
    0: "–ù–æ–≤–∏—á–æ–∫",
    50: "–õ—é–±–∏—Ç–µ–ª—å",
    100: "–û–ø—ã—Ç–Ω—ã–π –∫—É—Ä–∏–ª—å—â–∏–∫",
    150: "–ó–∞–≤–∏—Å–∏–º—ã–π",
    200: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª",
    250: "–í–µ—Ç–µ—Ä–∞–Ω",
    300: "–ù–∏–∫–æ—Ç–∏–Ω–æ–≤—ã–π –º–∞–Ω—å—è–∫",
    350: "–•–æ–¥—è—á–∞—è –ø–µ–ø–µ–ª—å–Ω–∏—Ü–∞",
    400: "–¢–µ—Ä–º–∏–Ω–∞—Ç–æ—Ä —Ç–∞–±–∞–∫–∞",
    450: "–°–º–µ—Ä—Ç–µ–ª—å–Ω–æ –±–æ–ª—å–Ω–æ–π —Ä–∞–∫–æ–º"
}

# –£—Ä–æ–≤–Ω–∏ IQ
IQ_LEVELS = {
    -1000: "–ò–¥–∏–æ—Ç",
    0: "–ù–∞—á–∏–Ω–∞—é—â–∏–π –º—ã—Å–ª–∏—Ç–µ–ª—å",
    50: "–£—á–µ–Ω–∏–∫",
    100: "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª",
    150: "–≠—Ä—É–¥–∏—Ç",
    200: "–ì–µ–Ω–∏–π",
    300: "–í—É–Ω–¥–µ—Ä–∫–∏–Ω–¥",
    400: "–§–∏–ª–æ—Å–æ—Ñ",
    500: "–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä",
    700: "–ú–∞–≥–∏—Å—Ç—Ä –º–æ–∑–≥–∞"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
CUSTOM_CONFIG = {
    "command_name": "/sex",  # ‚ö†Ô∏è –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
    "stat_name": "–∑–∞–Ω—è–ª—Å—è —Å–µ–∫—Å–æ–º",  # ‚ö†Ô∏è –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
    "emoji": "‚ö°",  # ‚ö†Ô∏è –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
    "unit": "—Ä–∞–∑",  # ‚ö†Ô∏è –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
    "min_gain": 1,  # ‚ö†Ô∏è –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
    "max_gain": 40,  # ‚ö†Ô∏è –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
    "levels": {  # ‚ö†Ô∏è –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–Ω–∏
        0: "–ù–æ–≤–∏—á–æ–∫",
        100: "–ü—Ä–æ—Ñ–∏",
        250: "–ú–∞—Å—Ç–µ—Ä",
        500: "–õ–µ–≥–µ–Ω–¥–∞",
        750: "–ì—É—Ä—É",
        1000: "–ê–±—Å–æ–ª—é—Ç–Ω—ã–π —Ç—Ä–∞—Ö–∞—Ç–µ–ª—å"
    }
}


# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
def load_users():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return {int(k): v for k, v in data.items()}
    except (json.JSONDecodeError, ValueError):
        return {}


def save_users(users):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=4)


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def init_user(user_id):
    if user_id not in users_data:
        users_data[user_id] = {
            "size": 0.0,
            "puffs_count": 0,
            "iq_score": 0,
            "custom_score": 0,
            "last_grow_used": None,
            "last_smoke_used": None,
            "last_iq_used": None,
            "last_custom_used": None
        }
        save_users(users_data)


# === –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ ===
def format_timedelta(td):
    total_seconds = int(td.total_seconds())
    if total_seconds <= 0:
        return "00:00:00"
    h, rem = divmod(total_seconds, 3600)
    m, s = divmod(rem, 60)
    return f"{h:02}:{m:02}:{s:02}"


# === –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø—Ä–µ–≤—å—é ===
def get_user_link(user_id, first_name=None, username=None):
    if not first_name:
        first_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if username:
        return f'<a href="https://t.me/{username}">{first_name}</a>'
    else:
        return f'<a href="tg://user?id={user_id}">{first_name}</a>'


# === –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ===
async def get_user_info(bot, user_id):
    try:
        user = await bot.get_chat(user_id)
        return user.first_name, user.username
    except:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", None


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ ===
def can_use_grow(user_id):
    init_user(user_id)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    last_str = users_data[user_id].get("last_grow_used")
    if not last_str:
        return True, None
    try:
        last_used = datetime.fromisoformat(last_str)
    except ValueError:
        return True, None
    next_use = last_used + GROW_COOLDOWN
    now = datetime.now()
    if now >= next_use:
        return True, None
    return False, next_use - now


def can_use_smoke(user_id):
    init_user(user_id)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    last_str = users_data[user_id].get("last_smoke_used")
    if not last_str:
        return True, None
    try:
        last_used = datetime.fromisoformat(last_str)
    except ValueError:
        return True, None
    next_use = last_used + SMOKE_COOLDOWN
    now = datetime.now()
    if now >= next_use:
        return True, None
    return False, next_use - now


def can_use_iq(user_id):
    init_user(user_id)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    last_str = users_data[user_id].get("last_iq_used")
    if not last_str:
        return True, None
    try:
        last_used = datetime.fromisoformat(last_str)
    except ValueError:
        return True, None
    next_use = last_used + IQ_COOLDOWN
    now = datetime.now()
    if now >= next_use:
        return True, None
    return False, next_use - now


def can_use_custom(user_id):
    init_user(user_id)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    last_str = users_data[user_id].get("last_custom_used")
    if not last_str:
        return True, None
    try:
        last_used = datetime.fromisoformat(last_str)
    except ValueError:
        return True, None
    next_use = last_used + CUSTOM_COOLDOWN
    now = datetime.now()
    if now >= next_use:
        return True, None
    return False, next_use - now


# === –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π ===
def get_smoker_level(puffs_count):
    current_level = "–ù–æ–≤–∏—á–æ–∫"
    for threshold, level_name in sorted(SMOKER_LEVELS.items(), reverse=True):
        if puffs_count >= threshold:
            current_level = level_name
            break
    return current_level


def get_iq_level(iq_score):
    current_level = "–ò–¥–∏–æ—Ç"
    for threshold, level_name in sorted(IQ_LEVELS.items(), reverse=True):
        if iq_score >= threshold:
            current_level = level_name
            break
    return current_level


def get_custom_level(score):
    current_level = "–ù–æ–≤–∏—á–æ–∫"
    for threshold, level_name in sorted(CUSTOM_CONFIG["levels"].items(), reverse=True):
        if score >= threshold:
            current_level = level_name
            break
    return current_level


# === –¢–æ–ø—ã ===
async def get_global_top(category, bot, limit=10):
    if category == "size":
        sorted_users = sorted(users_data.items(), key=lambda x: x[1].get("size", 0), reverse=True)
        title = "üçÜ –¢–û–ü –ü–û –†–ê–ó–ú–ï–†–£ –ß–õ–ï–ù–ê"
        emoji = "üçÜ"
        value_func = lambda x: f"{x.get('size', 0):.1f} —Å–º"
    elif category == "smoke":
        sorted_users = sorted(users_data.items(), key=lambda x: x[1].get("puffs_count", 0), reverse=True)
        title = "üö¨ –¢–û–ü –ö–£–†–ò–õ–¨–©–ò–ö–û–í"
        emoji = "üö¨"
        value_func = lambda x: f"{x.get('puffs_count', 0)} –∑–∞—Ç—è–∂–µ–∫"
    elif category == "iq":
        sorted_users = sorted(users_data.items(), key=lambda x: x[1].get("iq_score", 0), reverse=True)
        title = "üß† –¢–û–ü –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–û–í"
        emoji = "üß†"
        value_func = lambda x: f"{x.get('iq_score', 0)} IQ"
    elif category == "sex":
        sorted_users = sorted(users_data.items(), key=lambda x: x[1].get("custom_score", 0), reverse=True)
        title = f"{CUSTOM_CONFIG['emoji']} –¢–û–ü –°–ï–ö–°–£–ê–õ–¨–ù–´–• –ì–ï–†–û–ï–í"
        emoji = CUSTOM_CONFIG["emoji"]
        value_func = lambda x: f"{x.get('custom_score', 0)} {CUSTOM_CONFIG['unit']}"
    else:
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"

    top_text = f"üèÜ <b>{title}</b>\n\n"

    for i, (user_id, user_data) in enumerate(sorted_users[:limit], 1):
        first_name, username = await get_user_info(bot, user_id)
        user_link = get_user_link(user_id, first_name, username)
        value = value_func(user_data)
        top_text += f"{i}. {user_link} - {emoji} {value}\n"

    return top_text


async def get_group_top(category, chat_id, bot, limit=10):
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
    group_users = {}

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ç–æ–ø–∞
    try:
        chat_members = await bot.get_chat_administrators(chat_id)
        member_ids = [member.user.id for member in chat_members]
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ
        for user_id, data in users_data.items():
            if user_id in member_ids:
                group_users[user_id] = data
    except:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        group_users = users_data.copy()

    if category == "size":
        sorted_users = sorted(group_users.items(), key=lambda x: x[1].get("size", 0), reverse=True)
        title = "üçÜ –¢–û–ü –ì–†–£–ü–ü–´ –ü–û –†–ê–ó–ú–ï–†–£ –ß–õ–ï–ù–ê"
        emoji = "üçÜ"
        value_func = lambda x: f"{x.get('size', 0):.1f} —Å–º"
    elif category == "smoke":
        sorted_users = sorted(group_users.items(), key=lambda x: x[1].get("puffs_count", 0), reverse=True)
        title = "üö¨ –¢–û–ü –ì–†–£–ü–ü–´ –ö–£–†–ò–õ–¨–©–ò–ö–û–í"
        emoji = "üö¨"
        value_func = lambda x: f"{x.get('puffs_count', 0)} –∑–∞—Ç—è–∂–µ–∫"
    elif category == "iq":
        sorted_users = sorted(group_users.items(), key=lambda x: x[1].get("iq_score", 0), reverse=True)
        title = "üß† –¢–û–ü –ì–†–£–ü–ü–´ –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–û–í"
        emoji = "üß†"
        value_func = lambda x: f"{x.get('iq_score', 0)} IQ"
    elif category == "sex":
        sorted_users = sorted(group_users.items(), key=lambda x: x[1].get("custom_score", 0), reverse=True)
        title = f"{CUSTOM_CONFIG['emoji']} –¢–û–ü –ì–†–£–ü–ü–´ –°–ï–ö–°–£–ê–õ–¨–ù–´–• –ì–ï–†–û–ï–í"
        emoji = CUSTOM_CONFIG["emoji"]
        value_func = lambda x: f"{x.get('custom_score', 0)} {CUSTOM_CONFIG['unit']}"
    else:
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"

    top_text = f"üèÜ <b>{title}</b>\n\n"

    if not sorted_users:
        top_text += "üìä –í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
    else:
        for i, (user_id, user_data) in enumerate(sorted_users[:limit], 1):
            first_name, username = await get_user_info(bot, user_id)
            user_link = get_user_link(user_id, first_name, username)
            value = value_func(user_data)
            top_text += f"{i}. {user_link} - {emoji} {value}\n"

    return top_text


# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–æ–ø–∞ ===
def get_top_keyboard(is_private, current_category="size", top_type="global"):
    builder = InlineKeyboardBuilder()

    categories = [
        ("üçÜ –†–∞–∑–º–µ—Ä", "size"),
        ("üö¨ –ö—É—Ä–µ–Ω–∏–µ", "smoke"),
        ("üß† IQ", "iq"),
        (f"{CUSTOM_CONFIG['emoji']} –°–µ–∫—Å", "sex")
    ]

    for emoji_text, category in categories:
        if category == current_category:
            emoji_text = f"‚úÖ {emoji_text}"
        builder.add(InlineKeyboardButton(
            text=emoji_text,
            callback_data=f"top_{top_type}_{category}"
        ))

    if is_private:
        # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –≥–ª–æ–±–∞–ª—å–Ω—ã–º —Ç–æ–ø–æ–º –∏ —Ç–æ–ø–æ–º –≥—Ä—É–ø–ø—ã
        if top_type == "global":
            builder.add(InlineKeyboardButton(
                text="üë• –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–ø—É –≥—Ä—É–ø–ø—ã",
                callback_data="top_switch_group"
            ))
        else:
            builder.add(InlineKeyboardButton(
                text="üåç –ü–µ—Ä–µ–π—Ç–∏ –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É —Ç–æ–ø—É",
                callback_data="top_switch_global"
            ))

    builder.adjust(2)
    return builder.as_markup()


# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===
bot = Bot(token=TOKEN)
dp = Dispatcher()
users_data = load_users()


# === /start ===
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    user_link = get_user_link(user_id, message.from_user.first_name, message.from_user.username)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    init_user(user_id)

    text = (
        f"üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_link}!</b>\n\n"
        f"‚ú® <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:</b>\n\n"
        f"üçÜ <b>/dick</b> - –£–≤–µ–ª–∏—á–∏–≤–∞–π —Å–≤–æ–π —á–ª–µ–Ω –∫–∞–∂–¥—ã–π —á–∞—Å!\n"
        f"‚è∞ –ö—É–ª–¥–∞—É–Ω: 1 —á–∞—Å\n\n"
        f"üö¨ <b>/smoke</b> - –î–µ–ª–∞–π –∑–∞—Ç—è–∂–∫–∏ –∏ –ø–æ–≤—ã—à–∞–π —É—Ä–æ–≤–µ–Ω—å!\n"
        f"‚è∞ –ö—É–ª–¥–∞—É–Ω: 1 —á–∞—Å\n\n"
        f"üß† <b>/iq</b> - –ü—Ä–æ–∫–∞—á–∏–≤–∞–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å —É–º–Ω–µ–µ!\n"
        f"‚è∞ –ö—É–ª–¥–∞—É–Ω: 1 —á–∞—Å\n\n"
        f"{CUSTOM_CONFIG['emoji']} <b>{CUSTOM_CONFIG['command_name']}</b> - –ó–∞–Ω–∏–º–∞–π—Å—è —Å–µ–∫—Å–æ–º –∏ –ø—Ä–æ–∫–∞—á–∏–≤–∞–π—Å—è!\n"
        f"‚è∞ –ö—É–ª–¥–∞—É–Ω: 1 —á–∞—Å\n\n"
        f"üìä <b>/mystats</b> - –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ\n\n"
        f"üèÜ <b>/top</b> - –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n"
        f"<i>–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏ –Ω–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –∫ –≤–µ–ª–∏—á–∏—é! üöÄ</i>"
    )

    await message.reply(
        text,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )


# === /mystats ===
@dp.message(Command("mystats"))
async def cmd_mystats(message: Message):
    user_id = message.from_user.id
    user_link = get_user_link(user_id, message.from_user.first_name, message.from_user.username)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    init_user(user_id)

    user_data = users_data[user_id]
    size = user_data.get("size", 0.0)
    puffs_count = user_data.get("puffs_count", 0)
    iq_score = user_data.get("iq_score", 0)
    custom_score = user_data.get("custom_score", 0)

    smoker_level = get_smoker_level(puffs_count)
    iq_level = get_iq_level(iq_score)
    custom_level = get_custom_level(custom_score)

    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user_link}</b>\n\n"
        f"üçÜ <b>–†–∞–∑–º–µ—Ä:</b>\n"
        f"   ‚Ä¢ —Ç–≤–æ–π –ø–∏—Å—é–Ω —Ä–∞–∑–º–µ—Ä–æ–º: <i><b>{size:.1f} —Å–º</b></i>\n\n"
        f"üö¨ <b>–ö—É—Ä–µ–Ω–∏–µ:</b>\n"
        f"   ‚Ä¢ –ó–∞—Ç—è–∂–∫–∏: <i><b>{puffs_count}</b></i>\n"
        f"   ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: <i><b>{smoker_level}</b></i>\n\n"
        f"üß† <b>–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç:</b>\n"
        f"   ‚Ä¢ IQ: <i><b>{iq_score}</b></i>\n"
        f"   ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: <i><b>{iq_level}</b></i>\n\n"
        f"{CUSTOM_CONFIG['emoji']} <b>{CUSTOM_CONFIG['stat_name']}:</b>\n"
        f"   ‚Ä¢ —Ç—ã –∑–∞–Ω—è–ª—Å—è —Å–µ–∫—Å–æ–º: <i><b>{custom_score} {CUSTOM_CONFIG['unit']}</b></i>\n"
        f"   ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: <i><b>{custom_level}</b></i>"
    )

    await message.reply(
        text,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )


# === /top ===
@dp.message(Command("top"))
async def cmd_top(message: Message):
    is_private = message.chat.type == "private"

    if is_private:
        # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        top_text = await get_global_top("size", bot)
        keyboard = get_top_keyboard(is_private, "size", "global")
        await message.reply(top_text, reply_markup=keyboard, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    else:
        # –í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø –≥—Ä—É–ø–ø—ã
        top_text = await get_group_top("size", message.chat.id, bot)
        keyboard = get_top_keyboard(is_private, "size", "group")
        await message.reply(top_text, reply_markup=keyboard, parse_mode=ParseMode.HTML, disable_web_page_preview=True)


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Ç–æ–ø–∞ ===
@dp.callback_query(F.data.startswith("top_"))
async def handle_top_callback(callback: CallbackQuery):
    data = callback.data
    is_private = callback.message.chat.type == "private"

    if data == "top_switch_global":
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø
        top_text = await get_global_top("size", bot)
        keyboard = get_top_keyboard(is_private, "size", "global")
        await callback.message.edit_text(top_text, reply_markup=keyboard,
                                         parse_mode=ParseMode.HTML, disable_web_page_preview=True)

    elif data == "top_switch_group":
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ç–æ–ø –≥—Ä—É–ø–ø—ã
        top_text = await get_group_top("size", callback.message.chat.id, bot)
        keyboard = get_top_keyboard(is_private, "size", "group")
        await callback.message.edit_text(top_text, reply_markup=keyboard,
                                         parse_mode=ParseMode.HTML, disable_web_page_preview=True)

    elif data.startswith("top_global_") or data.startswith("top_group_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        parts = data.split("_")
        top_type = parts[1]  # global –∏–ª–∏ group
        category = parts[2]  # size, smoke, iq, sex

        if top_type == "global":
            top_text = await get_global_top(category, bot)
        else:
            top_text = await get_group_top(category, callback.message.chat.id, bot)

        keyboard = get_top_keyboard(is_private, category, top_type)
        await callback.message.edit_text(top_text, reply_markup=keyboard,
                                         parse_mode=ParseMode.HTML, disable_web_page_preview=True)

    await callback.answer()


# === /grow ===
@dp.message(Command("dick"))
async def cmd_grow(message: Message):
    user_id = message.from_user.id
    user_link = get_user_link(user_id, message.from_user.first_name, message.from_user.username)
    available, wait_time = can_use_grow(user_id)

    if not available:
        timer = format_timedelta(wait_time)
        current_size = users_data[user_id].get("size", 0.0)
        text = (
            f"üçÜ <b>{user_link}</b>, —Ç—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É —Å–µ–≥–æ–¥–Ω—è.\n\n"
            f"<blockquote>‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: <b>{timer}</b></blockquote>\n\n"
            f"üìè –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: <i><b>{current_size:.1f} —Å–º</b></i>"
        )
        await message.reply(
            text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
    growth = round(uniform(-10.0, 40.0), 1)
    old_size = users_data[user_id].get("size", 0.0)
    new_size = round(old_size + growth, 1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    users_data[user_id].update({
        "size": new_size,
        "last_grow_used": datetime.now().isoformat()
    })
    save_users(users_data)

    emoji = "üìà" if growth >= 0 else "üìâ"
    sign = "+" if growth >= 0 else ""

    text = (
        f"üçÜ <b>{user_link}</b>, —Ç—ã –∏–∑–º–µ–Ω–∏–ª —Ä–∞–∑–º–µ—Ä —á–ª–µ–Ω–∞ –Ω–∞ <b>{sign}{growth} —Å–º</b> {emoji}\n\n"
        f"üìè –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: <i><b>{new_size:.1f} —Å–º</b></i>"
    )

    await message.reply(
        text,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )


# === /smoke ===
@dp.message(Command("smoke"))
async def cmd_smoke(message: Message):
    user_id = message.from_user.id
    user_link = get_user_link(user_id, message.from_user.first_name, message.from_user.username)
    available, wait_time = can_use_smoke(user_id)

    if not available:
        timer = format_timedelta(wait_time)
        puffs_count = users_data[user_id].get("puffs_count", 0)
        smoker_level = get_smoker_level(puffs_count)
        text = (
            f"üö¨ <b>{user_link}</b>, —Ç—ã —É–∂–µ –∫—É—Ä–∏–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å.\n\n"
            f"<blockquote>‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: <b>{timer}</b></blockquote>\n\n"
            f"üéØ –£—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏–ª—å—â–∏–∫–∞: <i><b>{smoker_level}</b></i>\n"
            f"üí® –í—Å–µ–≥–æ –∑–∞—Ç—è–∂–µ–∫: <i><b>{puffs_count}</b></i>"
        )
        await message.reply(
            text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return

    # –î–µ–ª–∞–µ–º –∑–∞—Ç—è–∂–∫–∏
    puffs = randint(1, 3)
    old_puffs = users_data[user_id].get("puffs_count", 0)
    new_puffs = old_puffs + puffs
    smoker_level = get_smoker_level(new_puffs)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ
    if puffs == 1:
        puffs_text = "–∑–∞—Ç—è–∂–∫—É"
    elif 2 <= puffs <= 4:
        puffs_text = "–∑–∞—Ç—è–∂–∫–∏"
    else:
        puffs_text = "–∑–∞—Ç—è–∂–µ–∫"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    users_data[user_id].update({
        "puffs_count": new_puffs,
        "last_smoke_used": datetime.now().isoformat()
    })
    save_users(users_data)

    text = (
        f"üö¨ <b>{user_link}</b>, —Ç—ã —Å–¥–µ–ª–∞–ª(–∞) <b>{puffs} {puffs_text}</b>\n\n"
        f"üéØ –£—Ä–æ–≤–µ–Ω—å –∫—É—Ä–∏–ª—å—â–∏–∫–∞: <i><b>{smoker_level}</b></i>\n"
        f"üí® –í—Å–µ–≥–æ –∑–∞—Ç—è–∂–µ–∫: <i><b>{new_puffs}</b></i>"
    )

    await message.reply(
        text,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )


# === /iq ===
@dp.message(Command("iq"))
async def cmd_iq(message: Message):
    user_id = message.from_user.id
    user_link = get_user_link(user_id, message.from_user.first_name, message.from_user.username)
    available, wait_time = can_use_iq(user_id)

    if not available:
        timer = format_timedelta(wait_time)
        iq_score = users_data[user_id].get("iq_score", 0)
        iq_level = get_iq_level(iq_score)
        text = (
            f"üß† <b>{user_link}</b>, —Ç—ã —É–∂–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª –º–æ–∑–≥ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å.\n\n"
            f"<blockquote>‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: <b>{timer}</b></blockquote>\n\n"
            f"üéì –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞: <i><b>{iq_level}</b></i>\n"
            f"üìä –¢–≤–æ–π IQ: <i><b>{iq_score}</b></i>"
        )
        await message.reply(
            text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ IQ
    iq_change = randint(-5, 20)
    old_iq = users_data[user_id].get("iq_score", 0)
    new_iq = old_iq + iq_change
    iq_level = get_iq_level(new_iq)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    users_data[user_id].update({
        "iq_score": new_iq,
        "last_iq_used": datetime.now().isoformat()
    })
    save_users(users_data)

    emoji = "üìà" if iq_change >= 0 else "üìâ"
    sign = "+" if iq_change >= 0 else ""

    text = (
        f"üß† <b>{user_link}</b>, —Ç—ã –∏–∑–º–µ–Ω–∏–ª —Å–≤–æ–π IQ –Ω–∞ <b>{sign}{iq_change}</b> {emoji}\n\n"
        f"üìä –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π IQ: <i><b>{new_iq}</b></i>\n"
        f"üéì –£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞: <i><b>{iq_level}</b></i>"
    )

    await message.reply(
        text,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )


# === –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ===
@dp.message(Command("sex"))
async def cmd_custom(message: Message):
    user_id = message.from_user.id
    user_link = get_user_link(user_id, message.from_user.first_name, message.from_user.username)
    available, wait_time = can_use_custom(user_id)

    if not available:
        timer = format_timedelta(wait_time)
        custom_score = users_data[user_id].get("custom_score", 0)
        custom_level = get_custom_level(custom_score)
        text = (
            f"{CUSTOM_CONFIG['emoji']} <b>{user_link}</b>, —Ç—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É.\n\n"
            f"<blockquote>‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –∂–¥–∞—Ç—å: <b>{timer}</b></blockquote>\n\n"
            f"üèÜ –£—Ä–æ–≤–µ–Ω—å: <i><b>{custom_level}</b></i>\n"
            f"üìä {CUSTOM_CONFIG['stat_name']}: <i><b>{custom_score} {CUSTOM_CONFIG['unit']}</b></i>"
        )
        await message.reply(
            text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        return

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    gain = randint(CUSTOM_CONFIG["min_gain"], CUSTOM_CONFIG["max_gain"])
    old_score = users_data[user_id].get("custom_score", 0)
    new_score = old_score + gain
    custom_level = get_custom_level(new_score)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    users_data[user_id].update({
        "custom_score": new_score,
        "last_custom_used": datetime.now().isoformat()
    })
    save_users(users_data)

    text = (
        f"{CUSTOM_CONFIG['emoji']} <b>{user_link}</b>, —Ç—ã –ø–æ–µ–±–∞–ª—Å—è <b>+{gain} {CUSTOM_CONFIG['unit']}—Ä–∞–∑</b> üìà\n\n"
        f"üìä {CUSTOM_CONFIG['stat_name']}: <i><b>{new_score} {CUSTOM_CONFIG['unit']}</b></i>\n"
        f"üèÜ –£—Ä–æ–≤–µ–Ω—å: <i><b>{custom_level}</b></i>"
    )

    await message.reply(
        text,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )


# === –†–∞—Å—Å—ã–ª–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===
@dp.message(Command("broadcast"))
async def cmd_broadcast(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
    if message.photo:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        caption = message.caption or ""

        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ caption –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º –µ—Å—Ç—å
        if caption.startswith('/broadcast'):
            caption = caption.replace('/broadcast', '').strip()

        if not caption:
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ!")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å —Ñ–æ—Ç–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        success_count = 0
        fail_count = 0

        for user_id in users_data.keys():
            try:
                await bot.send_photo(
                    chat_id=user_id,
                    photo=photo.file_id,
                    caption=f"üì¢ <b>–†–ê–°–°–´–õ–ö–ê:</b>\n\n{caption}",
                    parse_mode=ParseMode.HTML
                )
                success_count += 1
                await asyncio.sleep(0.1)  # –ß—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å Telegram
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                fail_count += 1

        await message.reply(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Å —Ñ–æ—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"‚úì –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"‚úó –û—à–∏–±–æ–∫: {fail_count}"
        )

    else:
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
        broadcast_text = message.text.replace('/broadcast', '').strip()
        if not broadcast_text:
            await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º!")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        success_count = 0
        fail_count = 0

        for user_id in users_data.keys():
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=f"üì¢ <b>–†–ê–°–°–´–õ–ö–ê:</b>\n\n{broadcast_text}",
                    parse_mode=ParseMode.HTML
                )
                success_count += 1
                await asyncio.sleep(0.1)  # –ß—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å Telegram
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                fail_count += 1

        await message.reply(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"‚úì –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"‚úó –û—à–∏–±–æ–∫: {fail_count}"
        )


# === –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ç–µ–∫—Å—Ç ===
@dp.message(F.text.startswith("/55"))
async def unknown_command(message: Message):
    if message.text not in ["/start", "/dick", "/smoke", "/iq", "/sex", "/mystats", "/broadcast", "/top"]:
        await message.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –î–æ—Å—Ç—É–ø–Ω—ã–µ: /start, /dick, /smoke, /iq, /sex, /mystats, /top")


@dp.message(F.text)
async def handle_text(message: Message):
    pass  # –ò–≥–Ω–æ—Ä

# === –ó–∞–ø—É—Å–∫ ===
# === –ó–∞–ø—É—Å–∫ ===
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥, –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω
    if AUTOPOST_ENABLED:
        scheduler.add_job(
            autpost_to_group,
            'interval',
            minutes=AUTOPOST_INTERVAL_MINUTES,
            id='autpost_job'
        )
        scheduler.start()
        print(f"‚è∞ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–∫–ª—é—á—ë–Ω: –∫–∞–∂–¥—ã–µ {AUTOPOST_INTERVAL_MINUTES} –º–∏–Ω—É—Ç –≤ {AUTOPOST_CHAT_USERNAME}")

    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
    await dp.start_polling(bot, allowed_updates=["message", "callback_query"])

if __name__ == "__main__":
    try:
        asyncio.run(main())
        asyncio.create_task(ping_scheduler())
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
